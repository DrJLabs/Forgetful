[tool:pytest]
# Database Testing Framework Configuration - Step 1.2

# Test Discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test Markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, with external dependencies)
    database: Database tests (require database containers)
    migration: Database migration tests
    performance: Performance and benchmark tests
    slow: Slow running tests
    transaction: Transaction rollback tests
    concurrent: Concurrent access tests
    e2e: End-to-end tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests
    docker: Tests requiring Docker containers
    postgres: Tests requiring PostgreSQL
    sqlite: Tests using SQLite
    neo4j: Tests requiring Neo4j

# Test Output Configuration
addopts =
    -v
    --strict-markers
    --strict-config
    --tb=short
    --capture=no
    --durations=10
    --maxfail=5
    --color=yes
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --cov-branch
    --junit-xml=test-results.xml
    --html=test-report.html
    --self-contained-html

# Test Environment
env =
    TESTING = true
    DATABASE_URL = sqlite:///:memory:
    OPENAI_API_KEY = sk-test-key
    NEO4J_URL = bolt://localhost:7687
    NEO4J_USERNAME = neo4j
    NEO4J_PASSWORD = test
    LOG_LEVEL = DEBUG
    PYTEST_CURRENT_TEST = true

# Async Testing Configuration
asyncio_mode = auto

# Test Timeout Configuration
timeout = 300
timeout_method = thread

# Test Filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:testcontainers.*
    ignore::ResourceWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# Minimum Python Version
minversion = 3.8

# Test Collection
collect_ignore = [
    "setup.py",
    "conftest.py",
    "alembic/",
    "venv/",
    "__pycache__/",
    ".pytest_cache/",
    "htmlcov/",
    "test-results.xml",
    "test-report.html",
    "coverage.xml"
]

# Logging Configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test Discovery Options
norecursedirs = .git .tox dist build *.egg *.egg-info .pytest_cache htmlcov alembic venv

# Test Cache
cache_dir = .pytest_cache

# Performance Options
# Enable test parallelization for faster execution
# Run with: pytest -n auto
# Or specify number of workers: pytest -n 4