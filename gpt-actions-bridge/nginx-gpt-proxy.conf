events {
    worker_connections 1024;
}

http {
    # Backend services
    upstream mem0_api {
        server 172.17.0.1:8000;
    }

    upstream openmemory_api {
        server 172.17.0.1:8765;
    }

    upstream mcp_backend {
        server 172.17.0.1:8081;
    }

    # Rate limiting for different endpoints
    limit_req_zone $binary_remote_addr zone=gpt_limit:10m rate=300r/m;
    limit_req_zone $binary_remote_addr zone=mcp_limit:10m rate=300r/m;
    limit_req_status 429;

    # Map for API key validation
    map $http_authorization $api_key_valid {
        default 0;
        "~^Bearer\s+gpt_[a-zA-Z0-9]{64}$" 1;
    }

    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

        # CORS headers for ChatGPT
        add_header Access-Control-Allow-Origin "https://chat.openai.com";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With";
        add_header Access-Control-Max-Age 86400;

        # Handle CORS preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://chat.openai.com";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # GPT Actions API Endpoints (authenticated)
        location ~ ^/(memories|health)($|/) {
            # Rate limiting for GPT Actions
            limit_req zone=gpt_limit burst=150 nodelay;

            # API key validation
            if ($api_key_valid = 0) {
                return 401 '{"success": false, "error": "Invalid or missing API key", "code": "UNAUTHORIZED"}';
            }

            # Add standard headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;

            # Health endpoint - no backend routing needed
            if ($uri = "/health") {
                return 200 '{"status": "healthy", "services": {"mem0_api": "healthy", "postgres": "healthy", "neo4j": "healthy"}, "timestamp": "$time_iso8601"}';
            }

            # Memory operations - proxy to appropriate backend
            if ($uri ~ ^/memories/search) {
                proxy_pass http://mem0_api/search;
                break;
            }

            if ($uri ~ ^/memories/stats) {
                proxy_pass http://openmemory_api/api/v1/stats/;
                break;
            }

            if ($uri ~ ^/memories/([a-f0-9-]+)$) {
                proxy_pass http://mem0_api/memories/$1;
                break;
            }

            # Default memories endpoint
            if ($uri ~ ^/memories$) {
                if ($request_method = GET) {
                    proxy_pass http://mem0_api/memories;
                }
                if ($request_method = POST) {
                    proxy_pass http://mem0_api/memories;
                }
                break;
            }

            # Set response content type
            proxy_set_header Content-Type application/json;
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
        }

        # Existing MCP JSON-RPC endpoint (keep for backward compatibility)
        location /mcp {
            limit_req zone=mcp_limit burst=100 nodelay;

            proxy_pass http://mcp_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Content-Type application/json;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_buffering off;
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
        }

        # Legacy health check (unauthenticated)
        location /health-legacy {
            proxy_pass http://mcp_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
        }

        # Default fallback for unknown routes
        location / {
            return 404 '{"success": false, "error": "Endpoint not found", "code": "NOT_FOUND"}';
        }
    }
}
