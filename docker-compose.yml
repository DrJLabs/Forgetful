services:
  mem0:
    build:
      context: ./mem0
      dockerfile: server/dev.Dockerfile
    container_name: mem0
    restart: unless-stopped
    env_file: .env
    environment:
      - NEO4J_URI=bolt://neo4j-mem0:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres-mem0
      - POSTGRES_DB=mem0
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_COLLECTION_NAME=mem0_memories
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./data/mem0/history:/app/history
    ports:
      - '127.0.0.1:8000:8000'
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks: [traefik]
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=traefik'
      - 'traefik.http.routers.mem0-oma.rule=Host(`mem0.drjlabs.com`)'
      - 'traefik.http.routers.mem0-oma.entrypoints=websecure'
      - 'traefik.http.routers.mem0-oma.tls=true'
      - 'traefik.http.services.mem0-oma.loadbalancer.server.port=8000'
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4GB

  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres-mem0
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=mem0
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    command: >
      postgres -c 'shared_buffers=2GB' -c 'work_mem=256MB' -c 'maintenance_work_mem=1GB'
      -c 'effective_cache_size=6GB' -c 'max_connections=100' -c 'checkpoint_completion_target=0.9'
      -c 'random_page_cost=1.1' -c 'seq_page_cost=1' -c 'max_wal_size=4GB'
      -c 'min_wal_size=1GB' -c 'wal_buffers=64MB' -c 'default_statistics_target=100'
    networks: [traefik]
    healthcheck:
      test: ['CMD', 'pg_isready', '-q', '-d', 'mem0', '-U', '${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8GB
        reservations:
          cpus: '2.0'
          memory: 4GB

  neo4j:
    image: neo4j:5.26.4
    container_name: neo4j-mem0
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_server_memory_heap_initial__size=1G
      - NEO4J_server_memory_heap_max__size=4G
      - NEO4J_server_memory_pagecache_size=2G
    volumes:
      - ./data/neo4j:/data
    networks: [traefik]
    healthcheck:
      test: ['CMD-SHELL', 'wget -O /dev/null http://localhost:7474/ || exit 1']
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=traefik'
      - 'traefik.http.routers.neo4j-oma.rule=Host(`neo4j.drjlabs.com`)'
      - 'traefik.http.routers.neo4j-oma.entrypoints=websecure'
      - 'traefik.http.routers.neo4j-oma.tls=true'
      - 'traefik.http.services.neo4j-oma.loadbalancer.server.port=7474'
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8GB
        reservations:
          cpus: '2.0'
          memory: 4GB

  # OpenMemory Services
  openmemory-mcp:
    image: mem0/openmemory-mcp
    build:
      context: .
      dockerfile: ./openmemory/api/Dockerfile
    container_name: openmemory-mcp
    restart: unless-stopped
    environment:
      - USER=${USER:-drj}
      - API_KEY=${API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_HOST=postgres-mem0
      - POSTGRES_DB=mem0
      - POSTGRES_USER=${POSTGRES_USER:-drj}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - NEO4J_URL=neo4j://neo4j-mem0:7687
      - NEO4J_AUTH=${NEO4J_AUTH}
      - PYTHONWARNINGS=ignore::DeprecationWarning
    env_file:
      - ./openmemory/api/.env
    ports:
      - '127.0.0.1:8765:8765'
    volumes:
      - ./openmemory/api:/usr/src/openmemory
    command: >
      sh -c "uvicorn main:app --host 0.0.0.0 --port 8765 --workers 4"
    networks: [traefik]
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1GB
        reservations:
          cpus: '1.0'
          memory: 512MB

  openmemory-ui:
    build:
      context: ./openmemory/ui/
      dockerfile: Dockerfile
    image: mem0/openmemory-ui:latest
    container_name: openmemory-ui
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8765}
      - NEXT_PUBLIC_USER_ID=${USER:-drj}
    env_file:
      - ./openmemory/ui/.env
    ports:
      - '127.0.0.1:3000:3000'
    networks: [traefik]
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=traefik'
      - 'traefik.http.routers.openmemory-ui.rule=Host(`memory.drjlabs.com`)'
      - 'traefik.http.routers.openmemory-ui.entrypoints=websecure'
      - 'traefik.http.routers.openmemory-ui.tls=true'
      - 'traefik.http.services.openmemory-ui.loadbalancer.server.port=3000'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512MB
        reservations:
          cpus: '0.5'
          memory: 256MB

networks:
  traefik:
    external: true
