# GitHub Merge Queue Workflow for Multiple Background Agents
# This workflow handles merge queues to coordinate multiple agents working concurrently
# Based on: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-a-merge-queue

name: '🔄 Merge Queue Coordination'
permissions:
  contents: read

on:
  # Merge queue events - triggered when PRs are queued for merging
  merge_group:
    types: [checks_requested]

  # Pull request events for labeling and queue management
  pull_request:
    types: [labeled, unlabeled, opened, synchronize, reopened]
    branches: [main, develop]

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - clear-queue
          - status

env:
  # Caching optimization variables
  CACHE_VERSION: v1 # Increment to invalidate all caches
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

  # Environment Configuration
  APP_ENVIRONMENT: test
  APP_DEBUG: false
  APP_LOG_LEVEL: INFO
  APP_USER_ID: test_user
  
  # Database Configuration
  DATABASE_HOST: localhost
  DATABASE_PORT: 5432
  DATABASE_NAME: test_db
  DATABASE_USER: postgres
  DATABASE_PASSWORD: testpass
  DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test_db
  
  # Neo4j Configuration
  NEO4J_HOST: localhost
  NEO4J_PORT: 7687
  NEO4J_USERNAME: neo4j
  NEO4J_PASSWORD: testpass
  NEO4J_URI: bolt://localhost:7687
  NEO4J_AUTH: neo4j/testpass
  
  # OpenAI Configuration
  OPENAI_API_KEY: sk-test-key-for-mocking-only
  OPENAI_MODEL: gpt-4o-mini
  OPENAI_EMBEDDING_MODEL: text-embedding-3-small
  
  # Testing Configuration
  TESTING: true
  CI: true
  GITHUB_ACTIONS: true
  COVERAGE_THRESHOLD: 80
  
  # Legacy Variables (for backward compatibility)
  POSTGRES_HOST: localhost
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: testpass
  USER: test_user
  API_KEY: sk-test-key-for-mocking-only
  
  # Merge Queue Configuration
  MERGE_QUEUE_ENABLED: true
  PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/openmemory/api
  CI_DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test_db
  CI_NEO4J_URI: bolt://localhost:7687
  CI_COVERAGE_THRESHOLD: 80

jobs:
  # ============================================================================
  # MERGE QUEUE VALIDATION - Run quality gates on merge groups
  # ============================================================================
  merge-queue-validation:
    name: '🧪 Merge Queue Quality Gates'
    runs-on: ubuntu-latest
    if: github.event_name == 'merge_group'

    strategy:
      fail-fast: false # Allow all Python versions to complete
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      neo4j:
        image: neo4j:5.15
        env:
          NEO4J_AUTH: neo4j/testpass
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpass 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7687:7687

    steps:
      - name: Checkout Merge Group
        uses: actions/checkout@v4
        with:
          # For merge groups, we need to checkout the merge commit
          ref: ${{ github.event.merge_group.head_sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Multi-level Python caching strategy
      - name: Cache Python Dependencies (pip cache)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-pip-

      - name: Cache Virtual Environment
        uses: actions/cache@v4
        with:
          path: |
            venv/
            openmemory/api/venv/
          key: ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-
            ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev netcat-openbsd

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

          # Install mem0 package in development mode
          pip install -e mem0/

          cd openmemory/api
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Wait for Services
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          until nc -z localhost 7687; do
            echo "Waiting for Neo4j..."
            sleep 2
          done

      - name: Run Merge Queue Tests
        run: |
          echo "🧪 Running merge queue validation tests..."
          
          # Run critical tests for merge queue
          python -m pytest tests/ -v -m "not slow" --cov=shared --cov-report=term-missing
          
          # Run OpenMemory API critical tests
          cd openmemory/api
          python -m pytest tests/ -v -m "not slow" --cov=app --cov-report=term-missing
          
          echo "✅ Merge queue validation completed"

      - name: Upload Merge Queue Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: merge-queue-test-results-${{ matrix.python-version }}
          path: |
            test-results-*.xml
            coverage-*.xml
          retention-days: 15

  # ============================================================================
  # PR LABELING - Manage PR labels for merge queue
  # ============================================================================
  pr-labeling:
    name: '🏷️ PR Labeling and Queue Management'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Auto-label PRs
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = github;
            const pr = context.payload.pull_request;
            
            // Add labels based on files changed
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const labels = new Set();
            
            files.data.forEach(file => {
              if (file.filename.includes('openmemory/api/')) {
                labels.add('api');
              }
              if (file.filename.includes('openmemory/ui/')) {
                labels.add('ui');
              }
              if (file.filename.includes('shared/')) {
                labels.add('shared');
              }
              if (file.filename.includes('test')) {
                labels.add('tests');
              }
              if (file.filename.includes('.env') || file.filename.includes('docker-compose')) {
                labels.add('config');
              }
              if (file.filename.includes('.github/workflows/')) {
                labels.add('ci');
              }
            });
            
            // Add environment-specific labels
            labels.add('merge-queue-eligible');
            
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: Array.from(labels)
              });
            }

      - name: Check PR Readiness for Merge Queue
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = github;
            const pr = context.payload.pull_request;
            
            // Check if PR is ready for merge queue
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            const allChecksPassed = checks.data.check_runs.every(check => 
              check.conclusion === 'success' || check.conclusion === 'neutral'
            );
            
            if (allChecksPassed) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['ready-for-merge-queue']
              });
            } else {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                name: 'ready-for-merge-queue'
              }).catch(() => {}); // Ignore if label doesn't exist
            }

  # ============================================================================
  # MERGE QUEUE STATUS - Monitor merge queue status
  # ============================================================================
  merge-queue-status:
    name: '📊 Merge Queue Status'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'status'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Merge Queue Status
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = github;
            
            // Get merge queue status
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'main'
            });
            
            const queueEligible = prs.data.filter(pr => 
              pr.labels.some(label => label.name === 'ready-for-merge-queue')
            );
            
            console.log(`📊 Merge Queue Status:`);
            console.log(`- Total open PRs: ${prs.data.length}`);
            console.log(`- Ready for merge queue: ${queueEligible.length}`);
            
            if (queueEligible.length > 0) {
              console.log(`\n🔄 PRs in merge queue:`);
              queueEligible.forEach(pr => {
                console.log(`  - #${pr.number}: ${pr.title} (${pr.user.login})`);
              });
            }

      - name: Generate Merge Queue Report
        if: always()
        run: |
          echo "📊 Generating merge queue status report..."
          
          cat > merge-queue-report.md << EOF
          # Merge Queue Status Report
          
          **Generated:** $(date)
          **Repository:** ${{ github.repository }}
          **Workflow:** ${{ github.workflow }}
          
          ## Configuration
          
          - Environment: ${{ env.APP_ENVIRONMENT }}
          - Database URL: ${{ env.DATABASE_URL }}
          - Neo4j URI: ${{ env.NEO4J_URI }}
          - Merge Queue Enabled: ${{ env.MERGE_QUEUE_ENABLED }}
          
          ## Queue Management
          
          This workflow automatically manages PRs in the merge queue by:
          1. Running quality gates on merge groups
          2. Auto-labeling PRs based on changed files
          3. Tracking PR readiness for merge queue
          4. Providing status reports
          
          ## Next Steps
          
          - Monitor merge queue for conflicts
          - Review failed quality gates
          - Ensure all agents coordinate properly
          
          EOF
          
          cat merge-queue-report.md

      - name: Upload Merge Queue Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: merge-queue-status-report
          path: merge-queue-report.md
          retention-days: 30

  # ============================================================================
  # CLEAR MERGE QUEUE - Emergency queue clearing
  # ============================================================================
  clear-merge-queue:
    name: '🧹 Clear Merge Queue'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'clear-queue'
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clear Merge Queue Labels
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = github;
            
            // Get all open PRs
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            let clearedCount = 0;
            
            for (const pr of prs.data) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: 'ready-for-merge-queue'
                });
                
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: 'merge-queue-eligible'
                });
                
                clearedCount++;
                console.log(`🧹 Cleared merge queue labels from PR #${pr.number}`);
              } catch (error) {
                // Ignore if labels don't exist
                console.log(`⚠️ Could not clear labels from PR #${pr.number}: ${error.message}`);
              }
            }
            
            console.log(`✅ Cleared merge queue labels from ${clearedCount} PRs`);

      - name: Generate Clear Queue Report
        run: |
          echo "🧹 Generating clear queue report..."
          
          cat > clear-queue-report.md << EOF
          # Merge Queue Clear Report
          
          **Generated:** $(date)
          **Repository:** ${{ github.repository }}
          **Action:** Clear merge queue
          
          ## Results
          
          - Successfully cleared merge queue labels
          - All PRs removed from merge queue eligibility
          - Queue can now be rebuilt as needed
          
          ## Environment Configuration
          
          - App Environment: ${{ env.APP_ENVIRONMENT }}
          - Database URL: ${{ env.DATABASE_URL }}
          - Neo4j URI: ${{ env.NEO4J_URI }}
          - Merge Queue Enabled: ${{ env.MERGE_QUEUE_ENABLED }}
          
          ## Next Steps
          
          1. Review PR status manually
          2. Re-enable merge queue as needed
          3. Monitor for any issues
          
          EOF
          
          cat clear-queue-report.md

      - name: Upload Clear Queue Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: clear-queue-report
          path: clear-queue-report.md
          retention-days: 30
