# GitHub Merge Queue Workflow for Multiple Background Agents
# This workflow handles merge queues to coordinate multiple agents working concurrently
# Based on: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-a-merge-queue

name: '🔄 Merge Queue Coordination'

on:
  # Merge queue events - triggered when PRs are queued for merging
  merge_group:
    types: [checks_requested]

  # Pull request events for labeling and queue management
  pull_request:
    types: [labeled, unlabeled, opened, synchronize, reopened]
    branches: [main, develop]

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - clear-queue
          - status

env:
  # Environment variables for merge queue coordination
  PYTHONPATH: ${{ github.workspace }}
  TESTING: 'true'
  DATABASE_URL: 'postgresql://postgres:testpass@localhost:5432/test_db'
  NEO4J_URI: 'bolt://localhost:7687'
  NEO4J_USERNAME: 'neo4j'
  NEO4J_PASSWORD: 'testpass'
  COVERAGE_THRESHOLD: '80'
  OPENAI_API_KEY: 'test-key-for-mocking'
  MERGE_QUEUE_ENABLED: 'true'

jobs:
  # ============================================================================
  # MERGE QUEUE VALIDATION - Run quality gates on merge groups
  # ============================================================================
  merge-queue-validation:
    name: '🧪 Merge Queue Quality Gates'
    runs-on: ubuntu-latest
    if: github.event_name == 'merge_group'

    strategy:
      fail-fast: false # Allow all Python versions to complete
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      neo4j:
        image: neo4j:5.15
        env:
          NEO4J_AUTH: neo4j/testpass
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpass 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7687:7687

    steps:
      - name: Checkout Merge Group
        uses: actions/checkout@v4
        with:
          # For merge groups, we need to checkout the merge commit
          ref: ${{ github.event.merge_group.head_sha }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgeos-dev libpq-dev netcat-openbsd

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

          # Install API dependencies
          if [ -f openmemory/api/requirements.txt ]; then
            pip install -r openmemory/api/requirements.txt
          fi
          if [ -f openmemory/api/requirements-test.txt ]; then
            pip install -r openmemory/api/requirements-test.txt
          fi

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432; do
            echo "PostgreSQL not ready, waiting..."
            sleep 2
          done
          echo "✅ PostgreSQL is ready"

          echo "Waiting for Neo4j..."
          until nc -z localhost 7687; do
            echo "Neo4j not ready, waiting..."
            sleep 2
          done
          echo "✅ Neo4j is ready"

      - name: Run Critical Quality Gates
        run: |
          echo "🔄 Running critical quality gates for merge group..."
          echo "Merge Group: ${{ github.event.merge_group.head_sha }}"
          echo "Base SHA: ${{ github.event.merge_group.base_sha }}"

          # Run essential tests for merge queue
          python -m pytest tests/ -v --tb=short --cov=openmemory --cov=shared \
            --cov-report=term-missing --cov-report=xml \
            --cov-fail-under=80 \
            -k "not slow and not integration" \
            --maxfail=5 \
            --durations=10

      - name: Run Security Tests
        run: |
          echo "🔒 Running security tests for merge group..."
          cd openmemory/api
          python -m pytest tests/test_security* -v --tb=short

          echo "🔍 Running security scans..."
          bandit -r . -f json -o bandit-merge-queue.json || true

      - name: Upload Merge Queue Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: merge-queue-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            bandit-merge-queue.json
          retention-days: 7

  # ============================================================================
  # MERGE QUEUE MANAGEMENT - Handle PR labels and queue operations
  # ============================================================================
  merge-queue-management:
    name: '📋 Merge Queue Management'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check PR Labels and Queue Status
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = pr.labels.map(label => label.name);

            console.log(`🔍 PR #${pr.number}: ${pr.title}`);
            console.log(`📋 Labels: ${labels.join(', ')}`);
            console.log(`👤 Author: ${pr.user.login}`);
            console.log(`🔄 State: ${pr.state}`);
            console.log(`✅ Mergeable: ${pr.mergeable}`);
            console.log(`🤖 Draft: ${pr.draft}`);

            // Check if PR is ready for merge queue
            const isReadyForMerge = labels.includes('ready-to-merge') ||
                                   labels.includes('auto-merge') ||
                                   labels.includes('agent-ready');

            const isAgentPR = labels.includes('agent-pr') ||
                             labels.includes('bmad-agent') ||
                             labels.includes('background-agent') ||
                             pr.user.login.includes('bot') ||
                             pr.user.login.includes('agent');

            console.log(`🎯 Ready for merge: ${isReadyForMerge}`);
            console.log(`🤖 Agent PR: ${isAgentPR}`);

            // Comment on PR with merge queue status
            if (isReadyForMerge) {
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🔄 **Merge Queue Status**

                This PR is ready for the merge queue!

                **Status:** ✅ Ready for merge queue
                **Type:** ${isAgentPR ? '🤖 Agent PR' : '👤 Human PR'}
                **Labels:** ${labels.join(', ')}

                The PR will be automatically added to the merge queue once all required checks pass.

                **Quality Gates Required:**
                - 🧪 Unit Tests (Python 3.11 & 3.12)
                - 🔒 Security Tests
                - 📋 API Contract Tests
                - 🗄️ Database Tests
                - 🔗 Integration Tests
                - ⚡ Performance Tests
                - 🔍 Code Quality

                **Merge Queue Benefits:**
                - 🚫 Prevents merge conflicts
                - 🧪 Tests PRs against latest main branch
                - 🔄 Handles multiple concurrent PRs
                - 🤖 Supports multiple background agents
                `
              });
            }

            // Set outputs for other jobs
            core.setOutput('ready-for-merge', isReadyForMerge);
            core.setOutput('is-agent-pr', isAgentPR);
            core.setOutput('pr-number', pr.number);

      - name: Auto-label Agent PRs
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const isAgentPR = pr.user.login.includes('bot') ||
                             pr.user.login.includes('agent') ||
                             pr.title.includes('[AGENT]') ||
                             pr.title.includes('[BOT]');

            if (isAgentPR) {
              console.log('🤖 Auto-labeling agent PR');

              await github.rest.issues.addLabels({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['agent-pr', 'auto-merge']
              });

              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🤖 **Automated Agent PR Detected**

                This PR has been automatically labeled as an agent PR.

                **Auto-applied labels:**
                - \`agent-pr\` - Identifies this as an automated PR
                - \`auto-merge\` - Enables automatic merge queue processing

                **Next Steps:**
                1. Quality gates will run automatically
                2. PR will be added to merge queue when ready
                3. Automatic merge will occur after all checks pass

                **Agent Coordination:**
                - Multiple agents can work concurrently
                - Merge queue prevents conflicts
                - Quality gates ensure code quality
                `
              });
            }

  # ============================================================================
  # MERGE QUEUE COORDINATION - Handle multiple agents
  # ============================================================================
  merge-queue-coordination:
    name: '🤝 Agent Coordination'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'agent-pr')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Coordinate Multiple Agents
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            // Get all open PRs with agent labels
            const { data: openPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const agentPRs = openPRs.filter(p =>
              p.labels.some(l => l.name === 'agent-pr') ||
              p.user.login.includes('bot') ||
              p.user.login.includes('agent')
            );

            console.log(`🤖 Found ${agentPRs.length} agent PRs currently open`);

            // Check merge queue status
            const queuedPRs = agentPRs.filter(p =>
              p.labels.some(l => l.name === 'ready-to-merge' || l.name === 'auto-merge')
            );

            console.log(`🔄 ${queuedPRs.length} PRs ready for merge queue`);

            // Create coordination comment
            let coordinationInfo = `🤝 **Agent Coordination Status**

            **Current PR:** #${pr.number}
            **Total Agent PRs:** ${agentPRs.length}
            **Queued for Merge:** ${queuedPRs.length}

            **Agent PRs Overview:**`;

            for (const agentPR of agentPRs) {
              const status = agentPR.labels.some(l => l.name === 'ready-to-merge') ? '✅ Ready' : '🔄 In Progress';
              coordinationInfo += `
            - #${agentPR.number}: ${agentPR.title} - ${status}`;
            }

            coordinationInfo += `

            **Merge Queue Benefits:**
            - 🚫 Prevents conflicts between agents
            - 🧪 Tests each PR against latest main
            - 🔄 Handles concurrent agent work
            - ⚡ Efficient sequential merging

            **Next Steps:**
            1. Complete quality gates for this PR
            2. Automatic queue entry when ready
            3. Sequential merge processing
            `;

            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coordinationInfo
            });

  # ============================================================================
  # MERGE QUEUE STATUS - Report on queue status
  # ============================================================================
  merge-queue-status:
    name: '📊 Merge Queue Status'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'merge_group'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Report Merge Queue Status
        uses: actions/github-script@v7
        with:
          script: |
            console.log('📊 Merge Queue Status Report');
            console.log('================================');

            // Get repository info
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Get branch protection info
            try {
              const { data: protection } = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'main'
              });

              console.log('🛡️ Branch Protection Status:');
              console.log(`  - Required status checks: ${protection.required_status_checks.contexts.length}`);
              console.log(`  - Enforce admins: ${protection.enforce_admins.enabled}`);
              console.log(`  - Required reviews: ${protection.required_pull_request_reviews?.required_approving_review_count || 0}`);

            } catch (error) {
              console.log('⚠️ Could not fetch branch protection status');
            }

            // Get open PRs
            const { data: openPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const agentPRs = openPRs.filter(p =>
              p.labels.some(l => l.name === 'agent-pr') ||
              p.user.login.includes('bot') ||
              p.user.login.includes('agent')
            );

            const readyPRs = openPRs.filter(p =>
              p.labels.some(l => l.name === 'ready-to-merge' || l.name === 'auto-merge')
            );

            console.log('🔄 Pull Request Status:');
            console.log(`  - Total open PRs: ${openPRs.length}`);
            console.log(`  - Agent PRs: ${agentPRs.length}`);
            console.log(`  - Ready for merge: ${readyPRs.length}`);

            // Check workflow runs
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'test.yml',
              per_page: 10
            });

            const recentRuns = workflowRuns.workflow_runs.slice(0, 5);

            console.log('🧪 Recent Workflow Runs:');
            for (const run of recentRuns) {
              const status = run.status === 'completed' ?
                (run.conclusion === 'success' ? '✅' : '❌') : '🔄';
              console.log(`  - ${status} ${run.name} (${run.created_at})`);
            }

            // Report event context
            if (github.event_name === 'merge_group') {
              console.log('🔄 Merge Group Context:');
              console.log(`  - Head SHA: ${github.event.merge_group.head_sha}`);
              console.log(`  - Base SHA: ${github.event.merge_group.base_sha}`);
              console.log(`  - Head ref: ${github.event.merge_group.head_ref}`);
              console.log(`  - Base ref: ${github.event.merge_group.base_ref}`);
            }

            console.log('================================');
            console.log('✅ Merge Queue Status Report Complete');

  # ============================================================================
  # MERGE QUEUE CLEANUP - Clean up old artifacts and data
  # ============================================================================
  merge-queue-cleanup:
    name: '🧹 Queue Cleanup'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'clear-queue'

    steps:
      - name: Cleanup Merge Queue Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🧹 Starting merge queue cleanup...');

            // Get old workflow runs
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'merge-queue.yml',
              status: 'completed',
              per_page: 100
            });

            const oldRuns = workflowRuns.workflow_runs.filter(run => {
              const runDate = new Date(run.created_at);
              const cutoffDate = new Date();
              cutoffDate.setDate(cutoffDate.getDate() - 7); // Keep last 7 days
              return runDate < cutoffDate;
            });

            console.log(`🗑️ Found ${oldRuns.length} old workflow runs to clean up`);

            // Clean up old runs (GitHub API doesn't allow deletion, but we can log them)
            for (const run of oldRuns.slice(0, 10)) { // Limit to 10 for this demo
              console.log(`📋 Old run: ${run.id} (${run.created_at})`);
            }

            // Report cleanup status
            console.log('✅ Merge queue cleanup completed');
            console.log(`📊 Processed ${oldRuns.length} old workflow runs`);

  # ============================================================================
  # NOTIFICATION - Notify about merge queue events
  # ============================================================================
  merge-queue-notification:
    name: '📢 Queue Notifications'
    runs-on: ubuntu-latest
    needs: [merge-queue-validation, merge-queue-management]
    if: always() && (github.event_name == 'merge_group' || github.event_name == 'pull_request')

    steps:
      - name: Notify Merge Queue Status
        uses: actions/github-script@v7
        with:
          script: |
            const eventName = context.eventName;
            const success = '${{ needs.merge-queue-validation.result }}' === 'success' ||
                           '${{ needs.merge-queue-management.result }}' === 'success';

            console.log(`📢 Merge Queue Event: ${eventName}`);
            console.log(`✅ Success: ${success}`);

            if (eventName === 'merge_group') {
              console.log('🔄 Merge group processing completed');
              console.log(`📊 Validation result: ${{ needs.merge-queue-validation.result }}`);
            } else if (eventName === 'pull_request') {
              console.log('📋 Pull request queue management completed');
              console.log(`📊 Management result: ${{ needs.merge-queue-management.result }}`);
            }

            // Additional notification logic can be added here
            // For example: Slack notifications, email alerts, etc.

            console.log('✅ Merge queue notification completed');
