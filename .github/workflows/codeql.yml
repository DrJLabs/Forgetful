name: 'CodeQL Advanced Security Analysis'

on:
  push:
    branches: ['main', 'develop']
  pull_request:
    branches: ['main', 'develop']
  schedule:
    # Run weekly on Saturdays at 7:41 AM UTC (optimized time)
    - cron: '41 7 * * 6'

env:
  # Caching optimization variables
  CACHE_VERSION: v1 # Increment to invalidate all caches
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Using ubuntu-latest for better performance and cost efficiency
    runs-on: ubuntu-latest
    timeout-minutes: 360

    permissions:
      # Required for all workflows
      security-events: write
      # Required to fetch internal or private CodeQL packs
      packages: read
      # Required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          # GitHub Actions workflow analysis (NEW)
          - language: actions
            build-mode: none
          # JavaScript/TypeScript analysis
          - language: javascript-typescript
            build-mode: none
          # Python analysis
          - language: python
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Python for Python analysis
      - name: Set up Python 3.11
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Multi-level Python caching strategy
      - name: Cache Python Dependencies (pip cache)
        if: matrix.language == 'python'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-codeql-pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt', 'mem0/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-codeql-pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            ${{ env.CACHE_VERSION }}-codeql-pip-${{ runner.os }}-

      - name: Cache Virtual Environment
        if: matrix.language == 'python'
        uses: actions/cache@v4
        id: codeql-venv-cache
        with:
          path: ~/codeql-venv
          key: ${{ env.CACHE_VERSION }}-codeql-venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt', 'mem0/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-codeql-venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      # Install Python dependencies (optimized)
      - name: Install Python dependencies (optimized)
        if: matrix.language == 'python'
        run: |
          # Create or activate virtual environment
          if [ ! -d ~/codeql-venv ]; then
            python -m venv ~/codeql-venv
          fi
          source ~/codeql-venv/bin/activate

          # Only install if cache miss or requirements changed
          if [ "${{ steps.codeql-venv-cache.outputs.cache-hit }}" != "true" ]; then
            echo "ðŸ“¦ Installing Python dependencies..."
            python -m pip install --upgrade pip
            # Install mem0 package
            if [ -f mem0/pyproject.toml ]; then
              cd mem0 && pip install -e .
              cd ..
            fi
            # Install OpenMemory API requirements
            if [ -f openmemory/api/requirements.txt ]; then
              pip install -r openmemory/api/requirements.txt
            fi
            # Install shared dependencies
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi
            echo "âœ… Python dependencies installed and cached"
          else
            echo "âœ… Using cached Python dependencies"
          fi

      # Setup pnpm first
      - name: Setup pnpm
        if: matrix.language == 'javascript-typescript'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      # Setup Node.js for JavaScript/TypeScript analysis
      - name: Set up Node.js
        if: matrix.language == 'javascript-typescript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm' # Built-in pnpm cache
          cache-dependency-path: |
            openmemory/ui/pnpm-lock.yaml
            mem0/mem0-ts/pnpm-lock.yaml
            mem0/vercel-ai-sdk/pnpm-lock.yaml

      # Cache node_modules directories for faster installs
      - name: Cache OpenMemory UI node_modules
        if: matrix.language == 'javascript-typescript'
        uses: actions/cache@v4
        id: cache-ui-modules
        with:
          path: openmemory/ui/node_modules
          key: ${{ env.CACHE_VERSION }}-codeql-ui-modules-${{ hashFiles('openmemory/ui/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-codeql-ui-modules-

      # Install Node.js dependencies (optimized)
      - name: Install Node.js dependencies (optimized)
        if: matrix.language == 'javascript-typescript'
        run: |
          # Install dependencies for OpenMemory UI
          if [ -f openmemory/ui/package.json ]; then
            cd openmemory/ui
            if [ "${{ steps.cache-ui-modules.outputs.cache-hit }}" != "true" ]; then
              echo "ðŸ“¦ Installing OpenMemory UI dependencies..."
              pnpm install --frozen-lockfile --prefer-offline
            else
              echo "âœ… Using cached OpenMemory UI dependencies"
            fi
            cd ..
          fi
          # Install dependencies for mem0-ts
          if [ -f mem0/mem0-ts/package.json ]; then
            cd mem0/mem0-ts && pnpm install --frozen-lockfile --prefer-offline && cd ../..
          fi
          # Install dependencies for vercel-ai-sdk
          if [ -f mem0/vercel-ai-sdk/package.json ]; then
            cd mem0/vercel-ai-sdk && pnpm install --frozen-lockfile --prefer-offline && cd ../..
          fi

      # Initialize CodeQL with custom configuration
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          config-file: ./.github/codeql/codeql-config.yml

      # Manual build step (if needed)
      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'Manual build mode not currently required for this codebase'
          echo 'All languages use build-mode: none'
          exit 1

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'
          upload: true
